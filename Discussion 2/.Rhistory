# Extraction of Location Joined
for (i in 1:n) {
victims$Join[i] <- str_extract(z[i],
"Boarded\\sthe\\sTitanic\\sin\\s(\\w+)",
group = 1
)
}
# Extraction of full url
website_url <- "https://www.encyclopedia-titanica.org/"
for (i in 1:n) {
victims$url[i] <- str_c(website_url, str_extract(z[i],
"url\\shref=/([^<>]+)",
group = 1
))
}
# Extraction of price
# Price data regarding the crew is NA
for (i in 1:n) {
victims$Price[i] <- str_extract(z[i],
"div><div>([^<>]+)",
group = 1
)
}
z[1]
unique(victims$Age)
sum(is.na(victims$Age))
# need to find the useful line with table, the line with passenger info should be very long, for it contains over 2000+ passenger
# for (i in 1:length(x)){
#   print (paste(i, nchar(x[i])))
# }
# Longer line is 11th so need to use substr to find the details of the table
y <- x[11]
z <- str_split(y, "<span style=[^<>]+>")
z <- z[[1]]
# head(z)
z <- z[-1]
# tail(z)
length(z)
n <- length(z)
d <- data.frame(
FamilyName = rep("", n), GivenName = rep("", n),
Prefix = rep("", n), Age = rep("", n),
Class = rep("", n), Join = rep("", n),
url = rep("", n), Price = rep("", n),
Survived = 1
)
# Age
for (i in 1:n) {
d$Age[i] <- str_extract(z[i], "Age (\\d+)", group = 1)
}
# Need to check for NA to data clean and ensure data is ready for analysis
# Ex/ Passenger 9 is only 10 months, which is noted as 10m instead of Age = 10m
# Use reg exp to extract to all age info
# str_extract(z[1], "<td nowrap>(\\d+m)", group = 1)
for (i in 1:n) {
if (is.na(d$Age[i])) {
d$Age[i] <- str_extract(z[i], "<td nowrap>(\\d+m)", group = 1)
}
}
# Solution 2 for age: str_extract(z[i], [Age |nowrap>] (\\d+m?)", group = 1)
# Extraction of Family Name & Given Name
for (i in 1:n) {
# anything that is not < or >
d$FamilyName[i] <- str_extract(z[i], "familyName>([^<>]+)", group = 1)
d$GivenName[i] <- str_extract(z[i], "givenName>([^<>]+)", group = 1)
}
# Extraction of Class
for (i in 1:n) {
# Classmate solution ><span>(.+)</span></a>
d$Class[i] <- str_extract(z[i],
"(\\d\\w+\\sClass Passenger|\\w+\\sCrew|\\w+\\sStaff)",
# or str_extract( z[i], "<span>(.+(Passenger|Crew|Staff))</span>, group = 1)
group = 1
)
}
# Prof Provided Solution
# for (i in 1:n) {
#   d$Class[i] <- str_extract(z[i],
#   "<a title=\"([0-9][a-z]{2}\\sClass\\sPassenger|[A-Z][a-z]+\\sCrew|[A-Z][a-z]+\\sStaff)\"",
#   group = 1)
# }
# Extraction of Prefix
# 197 & 557 no prefix provided.
# Classmate solution: Prefix(\\D*)</span>\\s*<span item>
for (i in 1:n) {
d$Prefix[i] <- str_extract(z[i],
"Prefix>([^<>]+)",
group = 1
)
}
# Extraction of Location Joined
for (i in 1:n) {
d$Join[i] <- str_extract(z[i],
"Boarded\\sthe\\sTitanic\\sin\\s(\\w+)",
group = 1
)
}
# Extraction of full url
website_url <- "https://www.encyclopedia-titanica.org/"
for (i in 1:n) {
d$url[i] <- str_c(website_url, str_extract(z[i],
"url\\shref=/([^<>]+)",
group = 1
))
}
# Extraction of price
# Price data regarding the crew is NA
for (i in 1:n) {
d$Price[i] <- str_extract(z[i],
"div><div>([^<>]+)",
group = 1
)
}
#Trick: identifies all non-empty entrys between arrows
# However, this doesn't apply to this because the location of the info is not lined up
# temp <- str_split(z[i],"<[^<>]*>"")[[1]]
# Removes all empty strings
# temp <- tmep[nchar(temp) > 0]
x <- scan("titanic_victim.html", what = "character", sep = "\n")
x <- scan("titanic_victim.html", what = "character", sep = "\n")
y <- x[11]
z <- str_split(y, "<span style=[^<>]+>")
z <- z[[1]]
# head(z)
z <- z[-1]
# tail(z)
length(z)
n <- length(z)
victims <- data.frame(
FamilyName = rep("", n), GivenName = rep("", n),
Prefix = rep("", n), Age = rep("", n),
Class = rep("", n), Join = rep("", n),
url = rep("", n), Price = rep("", n),
Survived = 0
)
website_url <- "https://www.encyclopedia-titanica.org/"
for (i in 1:n) {
#Age
victims$Age[i] <- str_extract(z[i], "Age (\\d+)", group = 1)
if (is.na(victims$Age[i])) {
victims$Age[i] <- str_extract(z[i], "<td nowrap>(\\d+m)", group = 1)
}
#Family Name and Given Name
victims$FamilyName[i] <- str_extract(z[i], "familyName>([^<>]+)", group = 1)
victims$GivenName[i] <- str_extract(z[i], "givenName>([^<>]+)", group = 1)
#Extraction of Class
victims$Class[i] <- str_extract(z[i],
"(\\d\\w+\\sClass Passenger|\\w+\\sCrew|\\w+\\sStaff)",
group = 1)
#Extraction of Prefix
victims$Prefix[i] <- str_extract(z[i],
"Prefix>([^<>]+)",
group = 1
)
#Extraction of Location Boarded
victims$Join[i] <- str_extract(z[i],
"Boarded\\sthe\\sTitanic\\sin\\s(\\w+)",
group = 1
)
#Extraction of URL
victims$url[i] <- str_c(website_url, str_extract(z[i],
"url\\shref=/([^<>]+)",
group = 1
))
#Extraction of Price
victims$Price[i] <- str_extract(z[i],
"div><div>([^<>]+)",
group = 1
)
}
victims$Age
z[492]
victims$Age[492]
victim_html <- scan("titanic_victim.html", what = "character", sep = "\n")
useful_part <- victim_html[11]
victim_table_html <- str_split(useful_part, "<span style=[^<>]+>")
victim_table_html <- victim_table_html[[1]]
# head(victim_table_html)
victim_table_html <- victim_table_html[-1]
# tail(victim_table_html)
length(victim_table_html)
n2 <- length(victim_table_html)
victims <- data.frame(
FamilyName = rep("", n2), GivenName = rep("", n2),
Prefix = rep("", n2), Age = rep("", n2),
Class = rep("", n2), Join = rep("", n2),
url = rep("", n2), Price = rep("", n2),
Survived = 0
)
website_url <- "https://www.encyclopedia-titanica.org/"
for (i in 1:n2) {
#Age
victims$Age[i] <- str_extract(victim_table_html[i], "Age (\\d+)", group = 1)
if (is.na(victims$Age[i])) {
victims$Age[i] <- str_extract(victim_table_html[i], "<td nowrap>(\\d+m)", group = 1)
}
#Family Name and Given Name
victims$FamilyName[i] <- str_extract(victim_table_html[i], "familyName>([^<>]+)", group = 1)
victims$GivenName[i] <- str_extract(victim_table_html[i], "givenName>([^<>]+)", group = 1)
#Extraction of Class
victims$Class[i] <- str_extract(victim_table_html[i],
"(\\d\\w+\\sClass Passenger|\\w+\\sCrew|\\w+\\sStaff)",
group = 1)
#Extraction of Prefix
victims$Prefix[i] <- str_extract(victim_table_html[i],
"Prefix>([^<>]+)",
group = 1
)
#Extraction of Location Boarded
victims$Join[i] <- str_extract(victim_table_html[i],
"Boarded\\sthe\\sTitanic\\sin\\s(\\w+)",
group = 1
)
#Extraction of URL
victims$url[i] <- str_c(website_url, str_extract(victim_table_html[i],
"url\\shref=/([^<>]+)",
group = 1
))
#Extraction of Price
victims$Price[i] <- str_extract(victim_table_html[i],
"div><div>([^<>]+)",
group = 1
)
}
victims$Age
View(victims)
victim_table_html[139]
sum(is.na(victims$FamilyName))
sum(is.na(victims$GivenName))
sum(is.na(victims$Prefix))
victim_table_html[1408]
sum(is.na(victims$Class))
sum(is.na(victims$Join))
unique(victims$Join)
unique(victims$Price)
unique(victims$Survived)
victim_html <- scan("titanic_victim.html", what = "character", sep = "\n")
useful_part <- victim_html[11]
victim_table_html <- str_split(useful_part, "<span style=[^<>]+>")
victim_table_html <- victim_table_html[[1]]
# head(victim_table_html)
victim_table_html <- victim_table_html[-1]
# tail(victim_table_html)
# length(victim_table_html)
n2 <- length(victim_table_html)
victims <- data.frame(
FamilyName = rep("", n2), GivenName = rep("", n2),
Prefix = rep("", n2), Age = rep("", n2),
Class = rep("", n2), Join = rep("", n2),
url = rep("", n2), Price = rep("", n2),
Survived = 0
)
website_url <- "https://www.encyclopedia-titanica.org/"
for (i in 1:n2) {
#Age
victims$Age[i] <- str_extract(victim_table_html[i], "Age (\\d+)", group = 1)
if (is.na(victims$Age[i])) {
victims$Age[i] <- str_extract(victim_table_html[i], "<td nowrap>(\\d+m)", group = 1)
}
#Family Name and Given Name
victims$FamilyName[i] <- str_extract(victim_table_html[i], "familyName>([^<>]+)", group = 1)
victims$GivenName[i] <- str_extract(victim_table_html[i], "givenName>([^<>]+)", group = 1)
#Extraction of Class
victims$Class[i] <- str_extract(victim_table_html[i],
"(\\d\\w+\\sClass Passenger|\\w+\\sCrew|\\w+\\sStaff)",
group = 1)
#Extraction of Prefix
victims$Prefix[i] <- str_extract(victim_table_html[i],
"Prefix>([^<>]+)",
group = 1
)
#Extraction of Location Boarded
victims$Join[i] <- str_extract(victim_table_html[i],
"Boarded\\sthe\\sTitanic\\sin\\s(\\w+)",
group = 1
)
#Extraction of URL
victims$url[i] <- str_c(website_url, str_extract(victim_table_html[i],
"url\\shref=/([^<>]+)",
group = 1
))
#Extraction of Price
victims$Price[i] <- str_extract(victim_table_html[i],
"div><div>([^<>]+)",
group = 1
)
}
# Combination of dataframes
final_titanic_df <- rbind(d, victims)
?rbind
final_titanic_df
View(final_titanic_df)
for (i in 1:total_num){
if (endsWith(final_titanic_df$Age[i], "m")){
month <- str_extract(final_titanic_df$Age[i], "(\\d+)m", group = 1)
final_titanic_df$Age[i] <- month / 12
}
}
total_num <- length(final_titanic_df)
# Cleaning Age
for (i in 1:total_num){
if (endsWith(final_titanic_df$Age[i], "m")){
month <- str_extract(final_titanic_df$Age[i], "(\\d+)m", group = 1)
final_titanic_df$Age[i] <- month / 12
}
}
unique(final_titanic_df$Age)
# Combination of dataframes
final_titanic_df <- rbind(d, victims)
total_num <- length(final_titanic_df)
# Cleaning Age
for (i in 1:total_num){
if (endsWith(final_titanic_df$Age[i], "m")){
month <- str_extract(final_titanic_df$Age[i], "(\\d+)m", group = 1)
final_titanic_df$Age[i] <- month / 12
}
}
unique(final_titanic_df$Age)
# Combination of dataframes
final_titanic_df <- rbind(d, victims)
total_num <- length(final_titanic_df)
# Cleaning Age
for (i in 1:total_num){
if (endsWith(final_titanic_df$Age[i], "\\w")){
month <- str_extract(final_titanic_df$Age[i], "(\\d+)m", group = 1)
final_titanic_df$Age[i] <- month / 12
}
}
unique(final_titanic_df$Age)
# Combination of dataframes
final_titanic_df <- rbind(d, victims)
total_num <- length(final_titanic_df)
# Cleaning Age
for (i in 1:total_num){
if (endsWith(final_titanic_df$Age[i], "m")){
month <- str_extract(final_titanic_df$Age[i], "(\\d+)m", group = 1)
print (month)
final_titanic_df$Age[i] <- month / 12
}
}
?print
final_titanic_df$Age
for (i in 1:total_num){
print (str_extract(final_titanic_df$Age[i], "(\\d+)m", group = 1))
}
for (i in 1:total_num){
if (endsWith(final_titanic_df$Age[i], "m")){
print (str_extract(final_titanic_df$Age[i], "(\\d+)m", group = 1))
}
}
str_extract(final_titanic_df$Age[1046], "(\\d+)m", group = 1)
endsWith(final_titanic_df$Age[1046], "m")
7/12
for (i in 1:total_num){
if (endsWith(final_titanic_df$Age[i], "m")){
month <- str_extract(final_titanic_df$Age[i], "(\\d+)m", group = 1)
final_titanic_df$Age[i] <- month/12
}
}
unique(final_titanic_df$Age)
for (i in 1:total_num){
as.num
if (endsWith(final_titanic_df$Age[i], "m")){
month <- str_extract(final_titanic_df$Age[i], "(\\d+)m", group = 1)
final_titanic_df$Age[i] <- as.character(month/12)
}
}
for (i in 1:total_num){
if (endsWith(final_titanic_df$Age[i], "m")){
month <- str_extract(final_titanic_df$Age[i], "(\\d+)m", group = 1)
final_titanic_df$Age[i] <- as.character(month/12)
}
}
unique(final_titanic_df$Age)
typeof(final_titanic_df$Age)
?type.convert()
# Cleaning Age
for (i in 1:total_num){
if (endsWith(final_titanic_df$Age[i], "m")){
month <- str_extract(final_titanic_df$Age[i], "(\\d+)m", group = 1)
final_titanic_df$Age[i] <- type.convert(month/12, as.is = TRUE)
}
}
unique(final_titanic_df$Age)
type.convert(4/12, as.is = TRUE)
tst <- type.convert(4/12, as.is = TRUE)
typeof(tst)
tst <- as.character(4/12)
typeof(tst)
# Cleaning Age
for (i in 1:total_num){
if (endsWith(final_titanic_df$Age[i], "m")){
month <- str_extract(final_titanic_df$Age[i], "(\\d+)m", group = 1)
final_titanic_df$Age[i] <- as.character(month/12)
}
}
final_titanic_df$Age[1046]
endsWith(final_titanic_df$Age[1046], "m")
month <- str_extract(final_titanic_df$Age[1046], "(\\d+)m", group = 1)
final_titanic_df$Age[1046] <- as.character(month/12)
month
final_titanic_df$Age[1046] <- as.character(7/12)
final_titanic_df$Age[1046]
for (i in 1:total_num){
if (endsWith(final_titanic_df$Age[i], "m")){
month <- str_extract(final_titanic_df$Age[i], "(\\d+)m", group = 1)
year <- month/12
final_titanic_df$Age[i] <- as.character(year)
}
}
unique(final_titanic_df$Age)
?as.character
final_titanic_df$url[343]
final_titanic_df$url[1839]
library(tidyverse)
library(haven)
micro <- read_dta("cps_00001.dta")
setwd("~/INFO3370/Discussion 2")
library(tidyverse)
library(haven)
micro <- read_dta("cps_00001.dta")
filtered <- micro |>
# Restrict to people working more than 50 weeks per year
# Based on documentation, 6 is coded for those who worked
# between 50-52 weeks
filter(wkswork2 == 6) |>
# Restrict to people earning between 0 and 99999998
filter(incwage > 0 & incwage < 99999998)
summarized <- filtered |>
group_by(year) |>
summarise(
p10 = Hmisc::wtd.quantile(x = incwage, weights = asecwt, probs = 0.1),
p50 = Hmisc::wtd.quantile(x = incwage, weights = asecwt, probs = 0.5),
p90 = Hmisc::wtd.quantile(x = incwage, weights = asecwt, probs = 0.9)
)
pivoted <- summarized |>
pivot_longer(
cols = c("p10", "p50", "p90"),
names_to = "quantity",
values_to = "income"
)
inflation <- read_csv("https://info3370.github.io/data/inflation.csv")
joined <- pivoted |>
left_join(inflation, by = join_by(year))
adjusted_data <-
joined |>
mutate(income = income * inflation_factor)
adjusted_data |> ggplot(
mapping = aes(x = year, y = income, color = quantity))
adjusted_data |> ggplot(
mapping = aes(x = year, y = income, color = quantity)) +
geom_line()
?labs
?guides
adjusted_data |> ggplot(
mapping = aes(x = year, y = income, color = quantity),
labs(title = "Inequality of Wage Income from 1962 to 2022",
subtitle = "By the 10th, 50th, and 90th percentiles",
x = "Year",
y = "Income (Adjusted to Inflation Based on 2022 Dollars")) +
guides_legend ("ranod")
adjusted_data |> ggplot(
mapping = aes(x = year, y = income, color = quantity),
labs(title = "Inequality of Wage Income from 1962 to 2022",
subtitle = "By the 10th, 50th, and 90th percentiles",
x = "Year",
y = "Income (Adjusted to Inflation Based on 2022 Dollars")) +
guide_legend ("ranod")
adjusted_data |> ggplot(
mapping = aes(x = year, y = income, color = quantity),
labs(title = "Inequality of Wage Income from 1962 to 2022",
subtitle = "By the 10th, 50th, and 90th percentiles",
x = "Year",
y = "Income (Adjusted to Inflation Based on 2022 Dollars",
color = "Percentile")
) +
geom_line()
joined <- pivoted |>
left_join(inflation, by = join_by(year))
adjusted_data <-
joined |>
mutate(income = income * inflation_factor)
adjusted_data |> ggplot(
mapping = aes(x = year, y = income, color = quantity),
labs(title = "Inequality of Wage Income from 1962 to 2022",
subtitle = "By the 10th, 50th, and 90th percentiles",
x = "Year",
y = "Income (Adjusted to Inflation Based on 2022 Dollars",
color = "Percentile")
) +
geom_line()
styler:::style_active_file()
adjusted_data |> ggplot(
mapping = aes(x = year, y = income, color = quantity)) +
labs(
title = "Inequality of Wage Income from 1962 to 2022",
subtitle = "By the 10th, 50th, and 90th percentiles",
x = "Year",
y = "Income (Adjusted to Inflation Based on 2022 Dollars",
color = "Percentile") +
geom_line()
adjusted_data |> ggplot(
mapping = aes(x = year, y = income, color = quantity)) +
labs(
title = "Inequality of Wage Income from 1962 to 2022",
subtitle = "By the 10th, 50th, and 90th percentiles",
x = "Year",
y = "Income (Adjusted to Inflation Based on 2022 Dollars)",
color = "Percentile") +
facet_grid(rows = educ)
View(adjusted_data)
unique(final_titanic_df$Prefix)
