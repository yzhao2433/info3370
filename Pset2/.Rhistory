#From Question 1
mspe.prog.live
#Compare to train.index subset
mspe.train.ignore
#From Question 2
mspe.clot.prog.enz
#Smallest MSPE for Test Data
#Compare to train.index subset
mspe.train.clot.prog.enz
#Smallest MSPE for Train Data
#From Question 3
mspe.clot.prog.enz.liv.alch
#Compare to train.index subset
mspe.train.clot.prog.enz.liv.alch
minmspe.train <- min(c(mspe.train.ignore, mspe.train.clot.prog.enz, mspe.train.clot.prog.enz.liv.alch))
minmspe.train
minmspe.test <- min(c(mspe.prog.live, mspe.clot.prog.enz, mspe.clot.prog.enz.liv.alch))
minmspe.test
#compare using BIC????
# Show your work here
SurgicalUnitPart <- read.csv("~/BTRY 3020/Lab 13/SurgicalUnitPart.csv")
library(leaps)
#determine the number of observations
n <- nrow(SurgicalUnitPart)
#Will mimic having 2 data sets by partitioning the single data set given into two randomly selected subsets
set.seed(16)
train.index <- sample(1:n, size = n/2)
#Training Data
SU.training.data <- SurgicalUnitPart[train.index,]
#Testing Data
SU.testing.data <- SurgicalUnitPart[-train.index,]
subsetfit <- regsubsets(SurvivalTime ~. , data = SU.testing.data, nbest = 1)
ssfsum <- summary(subsetfit)
ssfsum
par(mfrow = c(1,3))
plot(ssfsum$rss, type = "l", xlab = " Number of Variables", ylab = "RSS")
plot(ssfsum$adjr2, type = "l", xlab = " Number of Variables", ylab = "Adjusted R^2")
plot(ssfsum$bic, type = "l", xlab = " Number of Variables", ylab = "BIC")
# Show your work here
SurgicalUnitNoLN <- read.csv("~/BTRY 3020/Lab 13/SurgicalUnitNoLN.csv")
#Training Data
SUL.training.data <- SurgicalUnitNoLN[train.index,]
#Testing Data
SUL.testing.data <- SurgicalUnitNoLN[-train.index,]
forwardfit = regsubsets(SurvivalTime ~ . , data = SurgicalUnitNoLN, method = "forward")
sumfwdfit <- summary(forwardfit)
sumfwdfit
par(mfrow = c(1,3))
plot(sumfwdfit$rss, type = "l", xlab = " Number of Variables", ylab = "RSS")
plot(sumfwdfit$adjr2, type = "l", xlab = " Number of Variables", ylab = "Adjusted R^2")
plot(sumfwdfit$bic, type = "l", xlab = " Number of Variables", ylab = "BIC")
data <- read_csv(file = "https://info3370.github.io/data/jencks_table1.csv")
install.packages("tidyverse")
knitr::opts_chunk$set(echo = TRUE)
data <- read_csv(file = "https://info3370.github.io/data/jencks_table1.csv")
install.packages('readr')
install.packages('tidyverse')
library(tidyverse)
data <- read_csv(file = "https://info3370.github.io/data/jencks_table1.csv")
data <- read_csv(file = "https://info3370.github.io/data/jencks_table1.csv")
ggplot(x = data$ratio, y = data$gdp)
ggplot(x = data$ratio, y = data$gdp) + geom_point()
ggplot(x = data$ratio, y = data$gdp) + geom_point()
#ggplot(x = data$ratio, y = data$gdp) + geom_point()
data |>
ggplot(mapping = aes(x = ratio, y = gdp)) +
geom_point()
ggplot(data = data, x = data$ratio, y = data$gdp) + geom_point()
#ggplot(data = data, x = data$ratio, y = data$gdp) + geom_point()
data |>
ggplot(mapping = aes(x = ratio, y = gdp)) +
geom_point()
#ggplot(data = data, x = data$ratio, y = data$gdp) + geom_point()
data |>
ggplot(mapping = aes(x = ratio, y = gdp)) +
geom_point() +
scale_x_continuous(name = "Inequality \n 90th " +
"percentile / 10th percentile") +
scale_y_continuous(name = "GDP as a Percent of the US")
#ggplot(data = data, x = data$ratio, y = data$gdp) + geom_point()
x_lab <- "Inequality \n 90th percentile / 10th percentile"
data |>
ggplot(mapping = aes(x = ratio, y = gdp)) +
geom_point() +
scale_x_continuous(name = x_lab) +
scale_y_continuous(name = "GDP as a Percent of the US")
installed.packages(ggrepel)
install.packages(ggrepel)
install.packages("ggrepel")
#ggplot(data = data, x = data$ratio, y = data$gdp) + geom_point()
x_lab <- "Inequality \n 90th percentile / 10th percentile"
data |>
ggplot(mapping = aes(x = ratio, y = gdp)) +
geom_point() +
scale_x_continuous(name = x_lab) +
scale_y_continuous(name = "GDP as a Percent of the US") +
geom_text_repel(label = data$country)
library(tidyverse)
library(ggrepel)
#ggplot(data = data, x = data$ratio, y = data$gdp) + geom_point()
x_lab <- "Inequality \n 90th percentile / 10th percentile"
data |>
ggplot(mapping = aes(x = ratio, y = gdp)) +
geom_point() +
scale_x_continuous(name = x_lab) +
scale_y_continuous(name = "GDP as a Percent of the US") +
geom_text_repel(label = data$country)
#ggplot(data = data, x = data$ratio, y = data$gdp) + geom_point()
x_lab <- "Inequality \n 90th percentile / 10th percentile"
data |>
ggplot(mapping = aes(x = ratio, y = gdp)) +
geom_point() +
scale_x_continuous(name = x_lab) +
scale_y_continuous(name = "GDP as a Percent of the US") +
geom_text_repel(label = data$country) +
geom_smooth(method= lm, se = FALSE)
library(tidyverse)
library(scales)
lifeCourse <- read_csv("https://info3370.github.io/data/lifeCourse.csv")
runif(1)
library(tidyverse)
library(scales)
lifeCourse <- read_csv("https://info3370.github.io/data/lifeCourse.csv")
# your code goes here
lifeCourse |> ggplot(aes(x = age, y = income, color = quantity)) + geom_point()
# your code goes here
lifeCourse |> ggplot(aes(x = age, y = income, color = quantity)) + geom_point() + facet_grid(row = education, cols = cohort)
# your code goes here
lifeCourse |> ggplot(aes(x = age, y = income, color = quantity)) + geom_point() + facet_grid(row = lifeCourse$education, cols = lifeCourse$cohort)
# your code goes here
lifeCourse |> ggplot(aes(x = age, y = income, color = quantity)) + geom_point() + facet_grid(row = vars(education), cols = vars(cohort))
install.packages("styler")
# your code goes here
lifeCourse |>
ggplot(aes(x = age, y = income, color = quantity)) + geom_point() + facet_grid(row = vars(education), cols = vars(cohort)) +
# your code goes here
lifeCourse |> ggplot(aes(x = age, y = income, color = quantity)) + geom_point() + facet_grid(row = vars(education), cols = vars(cohort)) +
```
# your code goes here
lifeCourse |>
ggplot(aes(x = age, y = income, color = quantity)) + geom_point() + facet_grid(row = vars(education), cols = vars(cohort))
# your code goes here
lifeCourse |>
ggplot(aes(x = age, y = income, color = quantity)) +
geom_point() +
facet_grid(row = vars(education), cols = vars(cohort)) +
label_dollar() +
scale_x_continuous(name = "Age") +
scale_y_continuous(name = "Annual Income (2022 Dollars)") +
ggtitle("Income Among People of Ages 30-45")
# your code goes here
lifeCourse |>
ggplot(aes(x = age, y = income, color = quantity)) +
geom_point() +
facet_grid(row = vars(education), cols = vars(cohort)) +
scale_x_continuous(name = "Age") +
scale_y_continuous(
name = "Annual Income (2022 Dollars)",
label = label_dollar()) +
ggtitle("Income Among People of Ages 30-45")
# your code goes here
lifeCourse |>
ggplot(aes(x = age, y = income, color = quantity)) +
geom_point() +
facet_grid(row = vars(education), cols = vars(cohort)) +
scale_x_continuous(name = "Age") +
scale_y_continuous(
name = "Annual Income (2022 Dollars)",
label = label_dollar()
) +
ggtitle("Income Among People of Ages 30-45")
# your code goes here
lifeCourse |>
ggplot(aes(x = age, y = income, color = quantity)) +
geom_point() +
facet_grid(row = vars(education), cols = vars(cohort)) +
scale_x_continuous(name = "Age") +
scale_y_continuous(
name = "Annual Income (2022 Dollars)",
label = label_dollar()
) +
ggtitle("Income Among American Workers of Ages 30-45")
# your code goes here
lifeCourse |>
ggplot(aes(x = age, y = income, color = quantity)) +
geom_point() +
facet_grid(row = vars(education), cols = vars(cohort)) +
scale_x_continuous(name = "Age") +
scale_y_continuous(
name = "Annual Income (2022 Dollars)",
label = label_dollar()
) +
ggtitle("Income Among American Workers \n
of Ages 30 - 45")
# your code goes here
lifeCourse |>
ggplot(aes(x = age, y = income, color = quantity)) +
geom_point() +
facet_grid(row = vars(education), cols = vars(cohort)) +
scale_x_continuous(name = "Age") +
scale_y_continuous(
name = "Annual Income (2022 Dollars)",
label = label_dollar()
) +
ggtitle("Income Among American Workers \n
of Ages 30 - 45") +
labs(fill = "Earnings Distribution")
# your code goes here
lifeCourse |>
ggplot(aes(x = age, y = income, color = quantity)) +
geom_point() +
facet_grid(row = vars(education), cols = vars(cohort)) +
scale_x_continuous(name = "Age") +
scale_y_continuous(
name = "Annual Income (2022 Dollars)",
label = label_dollar()
) +
ggtitle("Income Among American Workers \n
of Ages 30 - 45") +
legend(fill = "Earning Distribution")
# your code goes here
lifeCourse |>
ggplot(aes(x = age, y = income, color = quantity)) +
geom_point() +
facet_grid(row = vars(education), cols = vars(cohort)) +
scale_x_continuous(name = "Age") +
scale_y_continuous(
name = "Annual Income (2022 Dollars)",
label = label_dollar()
) +
ggtitle("Income Among American Workers \n
of Ages 30 - 45") +
legend(legend = "Earning Distribution")
# your code goes here
lifeCourse |>
ggplot(aes(x = age, y = income, color = quantity)) +
geom_point() +
facet_grid(row = vars(education), cols = vars(cohort)) +
scale_x_continuous(name = "Age") +
scale_y_continuous(
name = "Annual Income (2022 Dollars)",
label = label_dollar()
) +
ggtitle("Income Among American Workers \n
of Ages 30 - 45") +
guides(color = guide_legend (title = "Earning Distribution"))
gc()
# your code goes here
lifeCourse |>
ggplot(aes(x = age, y = income, color = quantity)) +
geom_point() +
facet_grid(row = vars(education), cols = vars(cohort)) +
scale_x_continuous(name = "Age") +
scale_y_continuous(
name = "Annual Income (2022 Dollars)",
label = label_dollar()
) +
ggtitle("Income Among American Workers \n
Born Between 1940s and 1970s") +
guides(color = guide_legend (title = "Earning Distribution"))
# your code goes here
lifeCourse |>
ggplot(aes(x = age, y = income, color = quantity)) +
geom_point() +
facet_grid(row = vars(education), cols = vars(cohort)) +
scale_x_continuous(name = "Age") +
scale_y_continuous(
name = "Annual Income (2022 Dollars)",
label = label_dollar()
) +
ggtitle("Income Among American Workers \n
Born in 1940, 1950, 1960, and 1970") +
guides(color = guide_legend (title = "Earning Distribution"))
# your code goes here
lifeCourse |>
ggplot(aes(x = age, y = income, color = quantity)) +
geom_point() +
facet_grid(row = vars(education), cols = vars(cohort)) +
scale_x_continuous(name = "Age") +
scale_y_continuous(
name = "Annual Income (2022 Dollars)",
label = label_dollar()
) +
ggtitle("Income Among American Workers
Born in 1940, 1950, 1960, and 1970") +
guides(color = guide_legend (title = "Earning Distribution"))
# your code goes here
lifeCourse |>
ggplot(aes(x = age, y = income, color = quantity)) +
geom_point() +
facet_grid(row = vars(education), cols = vars(cohort)) +
scale_x_continuous(name = "Age") +
scale_y_continuous(
name = "Annual Income (2022 Dollars)",
label = label_dollar()
) +
ggtitle(label = "Income Among American Workers",
subtitle = "Born in 1940, 1950, 1960, and 1970") +
guides(color = guide_legend (title = "Earning Distribution"))
fit <- lm(
income ~ age * factor(cohort) * education * quantity,
data = lifeCourse
)
predictions <- predict(object = fit)
lifeCourse |>
ggplot(aes(x = age, y = income, color = quantity)) +
geom_point() +
facet_grid(row = vars(education), cols = vars(cohort)) +
scale_x_continuous(name = "Age") +
scale_y_continuous(
name = "Annual Income (2022 Dollars)",
label = label_dollar()
) +
ggtitle(
label = "Income Among American Workers",
subtitle = "Born in 1940, 1950, 1960, and 1970"
) +
guides(color = guide_legend (title = "Earning Distribution")) + geom_line()
predictions <- predict(object = fit)
lifeCourse |>
ggplot(aes(x = age, y = income, color = quantity)) +
geom_point() +
facet_grid(row = vars(education), cols = vars(cohort)) +
scale_x_continuous(name = "Age") +
scale_y_continuous(
name = "Annual Income (2022 Dollars)",
label = label_dollar()
) +
ggtitle(
label = "Income Among American Workers",
subtitle = "Born in 1940, 1950, 1960, and 1970"
) +
guides(color = guide_legend (title = "Earning Distribution")) + geom_line(aes(y = predictions))
install.packages("rvest")
knitr::opts_chunk$set(echo = TRUE)
library(rvest)
# retrieving the target web page
document <- read_html("https://scrapeme.live/shop")
knitr::opts_chunk$set(echo = TRUE)
library(rvest)
# retrieving the target web page
document <- read_html("https://scrapeme.live/shop")
document
html_products <- documents |> html_element("li.product")
html_products <- document |> html_element("li.product")
html_products
# Save the overall main content the html code to a variable to
# make the code shorter and easier to understand
html_products <- document |> html_element("li.product")
url_links <- html_products |> html_element("a")
image <- html_products |> html_element("img")
names <- html_products |> html_element("h2")
# Save the overall main content the html code to a variable to
# make the code shorter and easier to understand
html_products <- document |> html_element("li.product")
url_links <- html_products |> html_element("a")
image <- html_products |> html_element("img")
names <- html_products |> html_element("h2")
price <- html_products |> html_element("span")
# Save the overall main content the html code to a variable to
# make the code shorter and easier to understand
html_products <- document |>
html_element("li.product")
url_links <- html_products |>
html_element("a") |>
html_attr("href")
image <- html_products |>
html_element("img") |>
html_attr("src")
names <- html_products |> html_element("h2")
price <- html_products |> html_element("span")
names
# Save the overall main content the html code to a variable to
# make the code shorter and easier to understand
html_products <- document |>
html_element("li.product")
url_links <- html_products |>
html_element("a") |>
html_attr("href")
image <- html_products |>
html_element("img") |>
html_attr("src")
# Text 2 removes the html parts and gets the text that users
# would see on the normal webpage
names <- html_products |>
html_element("h2") |>
html_text2()
price <- html_products |>
html_element("span") |>
html_text2()
practice_scrap <- data.frame(url_links,
image,
names,
price)
practice_scrap <- data.frame(url_links,
image,
names,
price)
write.csv(practice_scrap, file = " ./products.csv")
practice_scrap <- data.frame(url_links,
image,
names,
price)
write.csv(practice_scrap, file = " ./products.csv", fileEncoding = "UFT-8")
practice_scrap <- data.frame(url_links,
image,
names,
price)
write.csv(practice_scrap, file = " ./products.csv", fileEncoding = "UTF-8")
practice_scrap <- data.frame(url_links,
image,
names,
price)
# export the data frame containing the scraped data to a CSV file
write.csv(practice_scrap, file = "./products.csv", fileEncoding = "UTF-8")
# Save the overall main content the html code to a variable to
# make the code shorter and easier to understand
html_products <- document |>
html_elements("li.product")
url_links <- html_products |>
html_elements("a") |>
html_attr("href")
image <- html_products |>
html_elements("img") |>
html_attr("src")
# Text 2 removes the html parts and gets the text that users
# would see on the normal webpage
names <- html_products |>
html_elements("h2") |>
html_text2()
price <- html_products |>
html_elements("span") |>
html_text2()
practice_scrap <- data.frame(url_links,
image,
names,
price)
url links
url_liinks
url_links
# Save the overall main content the html code to a variable to
# make the code shorter and easier to understand
html_products <- document |>
html_elements("li.product")
url_links <- html_products |>
html_elements("a") |>
html_attr("href")
image <- html_products |>
html_elements("img") |>
html_attr("src")
# Text 2 removes the html parts and gets the text that users
# would see on the normal webpage
names <- html_products |>
html_elements("h2") |>
html_text2()
price <- html_products |>
html_elements("span") |>
html_text2()
practice_scrap <- data.frame(url_links,
image,
names,
price)
image
knitr::opts_chunk$set(echo = TRUE)
titanic_html <- read.csv(https://www.encyclopedia-titanica.org/titanic-passenger-list/)
knitr::opts_chunk$set(echo = TRUE)
titanic_html <- read.csv("https://www.encyclopedia-titanica.org/titanic-passenger-list/")
knitr::opts_chunk$set(echo = TRUE)
library(rvest)
titanic_html <- read.csv("https://www.encyclopedia-titanica.org/titanic-passenger-list/")
titanic_html <- read.html("https://www.encyclopedia-titanica.org/titanic-passenger-list/")
titanic_html <- read_html("https://www.encyclopedia-titanica.org/titanic-passenger-list/")
chart_html <- titanic_html |> html_elements("table-responsive")
chart_html
chart_html <- titanic_html |> html_nodes("div.table-responsive")
chart_html
chart_html <- titanic_html |>
html_elements("div.table-responsivech")
chart_html
chart_html <- titanic_html |>
html_nodes("div.table-responsivech") |>
html_nodes("table.table table-bordered dataTable no-footer dtr-inline collapsed")
chart_html
chart_html <- titanic_html |>
html_nodes("div.table-responsivech") |>
html_element("table")
chart_html
chart_html <- titanic_html |>
html_nodes("div.table-responsivech")
table_html <- chart_html |> html_elements("table")
table_html
install.packages("styler")
styler:::style_active_file()
styler:::style_active_file()
setwd("~/INFO3370/Pset2")
library(tidyverse)
library(scales)
library(haven)
data <- read_dta("cps_00002.dta")
View(data)
# Treating the negative CPS weights as 0 to remain consistant with the paper.
data$asecwth[data$asecwth < 0 ] <- 0
View(data)
library(tidyverse)
library(scales)
library(haven)
data <- read_dta("cps_00002.dta")
View(data)
# Treating the negative CPS weights as 0 to remain consistant with the paper.
data$asecwt[data$asecwt < 0 ] <- 0
data |>
filter(asecwt)
